# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
    node: circleci/node@6.3.0 # Needed for javascript runtime
    heroku: circleci/heroku@2.0.0 # Use the Heroku orb in your config
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-and-test: # runs not using Workflows must have a `build` job as entry point
      parallelism: 4
      docker: # run the steps with Docker
        - image: cimg/ruby:3.2.2 # if you're using ruby version >= 3.0, use cimg/ruby:3.x.y 
          environment: # environment variables for primary container
            BUNDLE_JOBS: 3
            BUNDLE_RETRY: 3
            BUNDLE_PATH: vendor/bundle
            PGHOST: 127.0.0.1
            PGUSER: circleci_user
            PGPASSWORD: circleci_pass
            RAILS_ENV: test
        - image: cimg/postgres:14.13 # database image
          environment: # environment variables for database, it is kind of obvious but it is important that they match with your test config in database.yml
            POSTGRES_USER: circleci_user
            POSTGRES_PASSWORD: circleci_pass
            POSTGRES_DB: fresh_recipes_api_test
      steps: # a collection of executable commands
        - checkout # special step to check out source code to working directory
        # Which version of bundler?
        - node/install:
            install-yarn: true
            node-version: '23.1.0'
        - run:
            name: Force Bundler Version
            command: |
              echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
              source $BASH_ENV
              gem install bundler
        - run:
            name: Bundle Install
            command: bundle install
        - run:
            name: Wait for DB
            command: dockerize -wait tcp://localhost:5432 -timeout 1m
        - run:
            name: Database setup
            command: bin/rails db:{create,migrate} --trace
        - run:
            name: Run rspec in parallel by directory
            command: |
              if [ "$CIRCLE_NODE_INDEX" == "0" ]; then
                bundle exec rspec spec/models
              elif [ "$CIRCLE_NODE_INDEX" == "1" ]; then
                bundle exec rspec spec/requests
              elif [ "$CIRCLE_NODE_INDEX" == "2" ]; then
                bundle exec rspec spec/poros
              else
                bundle exec rspec spec/gateway
              fi
        # Save test results for timing analysis
        - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
            path: test_results
        # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - say-hello
  build-test-deploy:
    jobs:
      - build-and-test
      - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
          requires:
            - build-and-test
          post-steps:
            - run:
                name: migrate
                command: heroku run -a $HEROKU_APP_NAME rails db:migrate
          filters:
            branches:
              only:
                - main